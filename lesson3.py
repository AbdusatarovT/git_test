# GitHub - это онлайн сервис - который предостовляет услуги по хранению репозиториев и позваляет управлять ими

# git - распределенная система контроля версий(позваляет записываеть изменения, обнавлять, получать и тд или же вернутся к старым версиям проекта)



# dasda k[k[sdk 
# ]]
# git init - инициализация нашего обьекта и создается папака .git(в ней содержаться все необходимые файлы нашего репозитория)
# git remote add url(https or ssh) - добавляет удаленный репозиторий который находится на каком нибуть сервере 
# git pull - стягиваем измения с какой либо папки
# git pull origin master - мы это будем исп тюе стягиваем все изм с ветки master
# git status - показывает статус проекта
# git add - добавляет файлы в рабочей папке в индекс (Индекс в Git — это специальная промежуточная область, в которой хранятся изменения файлов на пути от рабочей директории до репозитория. При выполнении коммита в него попадают только те изменения, которые были добавлены в индекс.)
# git add name_file -это добаляет
# git add . -все файлы добаляет которые были изменены
# git commit - добавляет все файлы которые находятся в индексе(т.е которые добаили c git add)(и она добавляет эти файлы в индексе во внутреннюю бд и сохранаяет их состояние на данный момент)
# git commit -m "какой-то комментарий "
# git branch - показывает список веток
# git branch name branch - можно создать веткку с таким названием (Ветвление означает, что вы отклоняетесь от основной линии разработки и продолжаете работу, не вмешиваясь в основную линию.)
# git checkout name branch - переключает на ветку (name branch)
# git push name branch - за отправку кода в удаленный репозиторий
# git push origin master
# git reset filename - удаляет файл из индекса

# git rm (-r - если папка)--cached name - перестать следить за ним 
# git branch -D name -удалить
# если хотим закинуть изменения на master (git merge name_branch)

# git log


# git push --force origin - загружает содержимое из локального репозитория в удаленный репозиторий.
# Обычно Git позволяет отправлять изменения только в том случае, если история коммитов вашей локальной ветки актуальна с веткой удаленного репозитория

# git reset [commit/tag] — отменить все коммиты после указанного коммита, изменения будут сохранены локально.
# git reset --hard [commit] — принудительно вернутся к указанному коммиту, не сохраняя историю и изменения.